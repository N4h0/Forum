@model Forum.Models.Post
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<!--Links to the corresponding topic, room, category and finally our homepage.-->
<a class="navigation-link link-primary" asp-controller="Home" asp-action="Index">Home ></a>
<a class="navigation-link link-primary" asp-action="CategoryDetails" asp-controller="Category" asp-route-id="@Model.Topic.Room.CategoryId">@Model.Topic.Room.Category.CategoryName ></a>
<a class="navigation-link link-primary" asp-action="RoomDetails" asp-controller="Room" asp-route-id="@Model.Topic.RoomId">@Model.Topic.Room.RoomName ></a>
<a class="navigation-link link-primary" asp-action="TopicDetails" asp-controller="Topic" asp-route-id="@Model.TopicId">@Model.Topic.TopicName ></a>
<a class="navigation-link link-primary">@Model.PostTitle</a>
<div class="postTitle-container">
    <h1 class="post-title">@Model.PostTitle</h1>
    <p class="post-title-info">
        <div class="username-title">Posted by: @Model.UserName</div>
        <small>@FormatTime(@Model.PostTime) on</small>
        <small>
            <a class="post-title-info-link" asp-controller="Category" asp-action="CategoryDetails" asp-route-id="@Model.Topic.Room.Category.CategoryId">
                @Model.Topic.Room.Category.CategoryName
            </a>
        </small>
    </p>
</div>





<!-- Render a partial view "_CommentTable" with the "Comments" property of the model as the model -->

<partial name="_CommentTable" model="Model.Comments" />

<!-- Check if the user is in either the "SuperAdmin" or "Member" role -->
@if (User.IsInRole("SuperAdmin")|| User.IsInRole("Member"))
{
    //Creaes a button to create a comment for the posts
    <a class="btn btn-primary"
       asp-controller="Comment"
       asp-action="CreateComment"
       asp-route-postId="@Model.PostId">Reply</a>
}



@functions {
    string FormatTime(DateTime postTime)
    {
        var timeDifference = DateTime.Now - postTime;

        if (timeDifference.TotalDays >= 1)
        {
            return postTime.ToString("dd MMMM yyyy");
        }
        else if (timeDifference.TotalHours >= 1)
        {
            int hours = (int)timeDifference.TotalHours;
            return $"{hours} {(hours == 1 ? "hour" : "hours")} ago";
        }
        else if (timeDifference.TotalMinutes >= 1)
        {
            int minutes = (int)timeDifference.TotalMinutes;
            return $"{minutes} {(minutes == 1 ? "minute" : "minutes")} ago";
        }
        else
        {
            int seconds = (int)timeDifference.TotalSeconds;
            return $"{seconds} {(seconds == 1 ? "second" : "seconds")} ago";
        }
    }

}